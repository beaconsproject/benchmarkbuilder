% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/builder.R
\name{seeds}
\alias{seeds}
\title{Create a seeds table.}
\usage{
seeds(
  catchments_sf,
  filter_intactness_col = NULL,
  filter_intactness_threshold = NULL,
  filter_polygon = NULL,
  areatarget_value = NULL,
  areatarget_col = NULL,
  areatarget_polygon = NULL,
  areatarget_polygon_col = NULL
)
}
\arguments{
\item{catchments_sf}{sf object of the catchments dataset with unique identifier column: CATCHNUM.}

\item{filter_intactness_col}{Optional intactness column in \code{catchments_sf} to filter on.}

\item{filter_intactness_threshold}{If \code{filter_intactness_col} provided, the minimum intactness value to filter on.}

\item{filter_polygon}{Optional sf polygon object to filter catchments. Only catchments inside the polygon are kept.}

\item{areatarget_value}{Optional single area target value to apply to all seeds.}

\item{areatarget_col}{Optional column in \code{catchments_sf} holding area target values.}

\item{areatarget_polygon}{Optional sf polygon object holding area target values that are applied to seeds using a spatial join.}

\item{areatarget_polygon_col}{If \code{areatarget_polygon} provided, the column containing the area target values to join to the catchments.}
}
\value{
A tibble of seed catchments and their area targets.
}
\description{
The seeds table is an niput to BUILDER that lists seed catchments and area targets. Seed catchments are the
starting catchments for constructing benchmarks. This function provides various
methods for filtering the catchments dataset to create seeds. Each seed requires an area target detailing
the minimum area in m2 for the constructed benchmark. Various methods are provided for adding an area target
for each seed catchment.
}
\details{
\subsection{Filtering}{

Two filtering methods are provided, one or both can be used. If no filter arguments are provided, all catchments in
\code{catchments_sf} will be added to the seeds table:
\itemize{
\item{If \code{filter_intactness_col} and \code{filter_intactness_threshold} are provided, catchments will be filtered
to include those with an intactness value >= the threshold.}
\item{A \code{filter_polygon} can be provided to filter the catchments based on their centroid (more
specifically, \code{sf::st_point_on_surface()}) falling inside the \code{filter_polygon}.}
}
}

\subsection{Area targets}{

Area targets should be provided in m2.
Arguments to satisfy one of the following area target methods must be provided. If multiple arguments are provided, only one
will be used, with the priority following the order below:
\itemize{
\item{Single-value. If \code{areatarget_value} is provided, all seeds will be assigned the area target value.}
\item{Column. If \code{areatarget_col} is provided, area targets will be pulled from the column of that
name in \code{catcments_sf}.}
\item{Spatial join. An \code{areatarget_polygon} will be spatially joined to the catchments. Area targets
will be extracted from the \code{areatarget_polygon_col} column in \code{areatarget_polygon}. If multiple polygons in
\code{areatarget_polygon} intersect a catchment, the value in \code{areatarget_polygon_col} with the most overlap will be
selected.}
}
}
}
\examples{
# Use all catchments as seeds, single area target
seeds(catchments_sf = catchments_sample, areatarget_value = 1000000000)

# Use all catchments as seeds, column area target
catchments_sample$area_target <- 1000000000
seeds(catchments_sf = catchments_sample, areatarget_col = "area_target")

# Filter based on intactness
seeds(catchments_sf = catchments_sample,
      filter_intactness_col = "intact", filter_intactness_threshold = 1,
      areatarget_value = 1000000000)

library(dplyr)
library(sf)
# Filter based on polygon, assign area target via spatial join
ref_poly <- data.frame(
             lon = c(-138.4, -138.1, -138.1, -138.4,  -138.1, -138.1, -138, -138),
             lat = c(64.3, 64.3, 64.1, 64.1,  64.3, 64.1, 64.1, 64.3),
             Areatarget = c(rep(1000000000, 4),rep(2000000000,4))) \%>\%
           st_as_sf(coords = c("lon", "lat"), crs = 4326) \%>\%
           group_by(Areatarget) \%>\%
           summarise(geometry = st_combine(geometry)) \%>\%
           st_cast("POLYGON") \%>\%
           st_transform(st_crs(catchments_sample))
seeds(catchments_sf = catchments_sample,
      filter_polygon = ref_poly,
      areatarget_polygon = ref_poly, areatarget_polygon_col = "Areatarget")

}
